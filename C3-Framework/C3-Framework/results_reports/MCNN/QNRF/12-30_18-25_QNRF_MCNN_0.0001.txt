import os
from easydict import EasyDict as edict
import time
import torch

# init
__C = edict()
cfg = __C

#------------------------------TRAIN------------------------
__C.SEED = 3035 # random seed,  for reporduction
__C.DATASET = 'QNRF' # dataset selection: GCC, SHHA, SHHB, UCF50, QNRF, WE

if __C.DATASET == 'UCF50':# only for UCF50
	from datasets.UCF50.setting import cfg_data
	__C.VAL_INDEX = cfg_data.VAL_INDEX 

if __C.DATASET == 'GCC':# only for GCC
	from datasets.GCC.setting import cfg_data
	__C.VAL_MODE = cfg_data.VAL_MODE 


__C.NET = 'MCNN' # net selection: MCNN, VGG, VGG_DECODER, Res50, CSRNet

__C.PRE_GCC = False # use the pretrained model on GCC dataset
__C.PRE_GCC_MODEL = '' # path to model

__C.GPU_ID = [0] # sigle gpu: [0], [1] ...; multi gpus: [0,1]

# learning rate settings
__C.LR = 1e-4 # learning rate
__C.LR_DECAY = 1 # decay rate
__C.LR_DECAY_START = -1 # when training epoch is more than it, the learning rate will be begin to decay
__C.NUM_EPOCH_LR_DECAY = 1 # decay frequency
__C.MAX_EPOCH = 3000

# print 
__C.PRINT_FREQ = 30

now = time.strftime("%m-%d_%H-%M", time.localtime())

__C.EXP_NAME = now \
			 + '_' + __C.DATASET \
             + '_' + __C.NET \
             + '_' + str(__C.LR)

if __C.DATASET == 'UCF50':
	__C.EXP_NAME += '_' + str(__C.VAL_INDEX)	

if __C.DATASET == 'GCC':
	__C.EXP_NAME += '_' + __C.VAL_MODE	

__C.EXP_PATH = './exp' # the path of logs, checkpoints, and current codes


#------------------------------VAL------------------------
__C.VAL_DENSE_START = 200
__C.VAL_FREQ = 10 # Before __C.VAL_DENSE_START epoches, the freq is set as __C.VAL_FREQ

#------------------------------VIS------------------------
__C.VISIBLE_NUM_IMGS = 1 #  must be 1 for training images with the different sizes



#================================================================================
#================================================================================
#================================================================================  



===============+++++++++++++++===============

all_ep_1_mae_510.4_mse_718.3
    [mae 510.39 mse 718.33], [val loss 0.1367]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_11_mae_421.9_mse_645.9
    [mae 421.89 mse 645.94], [val loss 0.1246]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_31_mae_399.7_mse_593.2
    [mae 399.69 mse 593.23], [val loss 0.1068]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_51_mae_300.1_mse_481.6
    [mae 300.12 mse 481.61], [val loss 0.0977]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_61_mae_299.0_mse_438.8
    [mae 299.04 mse 438.76], [val loss 0.0914]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_71_mae_264.9_mse_393.3
    [mae 264.90 mse 393.30], [val loss 0.0940]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_91_mae_244.1_mse_404.3
    [mae 244.09 mse 404.30], [val loss 0.0876]
===============+++++++++++++++===============

===============+++++++++++++++===============

all_ep_101_mae_243.5_mse_364.7
    [mae 243.45 mse 364.67], [val loss 0.0873]
===============+++++++++++++++===============

